#!/bin/bash

# Docker registry credentials
DOCKER_USERNAME="guerdellyeya"
DOCKER_PASSWORD="14026673a"

# Log in to Docker registry
echo "Logging in to Docker registry..."
echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

# Create Docker network if it doesn't exist
docker network inspect my-buffer-network >/dev/null 2>&1 || docker network create my-buffer-network

# Function to stop and remove existing containers based on image name
stop_and_remove_container() {
  image_name=$1
  container_id=$(docker ps --filter "ancestor=$image_name" --format "{{.ID}}")

  if [ -n "$container_id" ]; then
    echo "Stopping and removing the running container for $image_name..."
    docker stop "$container_id"
    docker rm "$container_id"
  fi
}

# Buffer DB
db_image="guerdellyeya/mysql-buffer:finalversion"
stop_and_remove_container "$db_image"
docker pull "$db_image"
docker run --network my-buffer-network -d --name buffer_container -p 3309:3306 "$db_image"

# RegistrationLogin service
registration_image="guerdellyeya/registrationloginfv:finalversion"
stop_and_remove_container "$registration_image"
docker pull "$registration_image"
docker run --network my-buffer-network -d -p 8091:8081 -e SPRING_DATASOURCE_URL=jdbc:mysql://buffer_container:3306/buffer "$registration_image"

# Angular Frontend
frontend_image="guerdellyeya/angular-buffer-project:finalversion"
stop_and_remove_container "$frontend_image"
docker pull "$frontend_image"
docker run --network my-buffer-network -d -p 4201:80 "$frontend_image"

# CSV microservice
csv_image="guerdellyeya/csvfv:finalversion"
stop_and_remove_container "$csv_image"
docker pull "$csv_image"
docker run --network my-buffer-network -d -p 8092:8082 -e SPRING_DATASOURCE_URL=jdbc:mysql://buffer_container:3306/buffer "$csv_image"

echo "All containers are up and running."
